// Generated by ts-to-zod
import { z } from "zod";
import i18n from "../i18n";

let createCourSchema: z.ZodType | null;
const checkI18nInitialization = async () => {
  if (!i18n.isInitialized) {
    await new Promise((resolve) => {
      i18n.on("initialized", resolve);
    });
  }
};
const getTranslation = (key: string) => {
  return i18n.t(key);
};
export const validateExerciceInput = async (data: any) => {
  if (!createCourSchema) {
    await checkI18nInitialization();
    createCourSchema = await createCourInputSchema();
  }
  return createCourSchema.parse(data);
};
// Regenerate schema when language changes
const handleLanguageChange = async () => {
  createCourSchema = await createCourInputSchema();
};
i18n.on("languageChanged", handleLanguageChange);

export const createCourInputSchema = async () => {
  await checkI18nInitialization(); // Ensure i18n is initialized
  return z.object({
    name: z
      .string()
      .min(1, { message: getTranslation("txt_error_name_required") }),
    images: z.array(z.string()).min(1, {
      message: getTranslation("txt_error_at_least_one_image_required"),
    }),
    content: z
      .string()
      .min(1, { message: getTranslation("txt_error_content_required") }),
    chapitreId: z.string().min(1, {
      message: getTranslation("txt_error_chapter_id_required"),
    }),
    isLocked: z.boolean().optional(),
    description: z.string().optional(),
  });
};

export const getCourByIdSchema = z.object({
  id: z.string(),
});

export const deleteCourByIdSchema = z.object({
  id: z.string(),
});

export const updateCourInputSchema = z.object({
  id: z.union([z.string(), z.array(z.string())]).optional(),
  name: z.string().optional(),
  images: z.array(z.string()).optional(),
  content: z.string().optional(),
  chapitreId: z.string().optional(),
  description: z.string().optional(),
  isLocked: z.boolean().optional(),
});
