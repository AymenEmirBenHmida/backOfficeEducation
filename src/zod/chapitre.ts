// Generated by ts-to-zod
import { z } from "zod";
import i18n from "../i18n";

let createChapterSchema: z.ZodType | null;

const checkI18nInitialization = async () => {
  if (!i18n.isInitialized) {
    await new Promise((resolve) => {
      i18n.on("initialized", resolve);
    });
  }
};
const getTranslation = (key: string) => {
  return i18n.t(key);
};
export const validateChapterInput = async (data: any) => {
  if (!createChapterSchema) {
    await checkI18nInitialization();
    createChapterSchema = await createChapterInputSchema();
  }
  return createChapterSchema.parse(data);
};
// Regenerate schema when language changes
const handleLanguageChange = async () => {
  createChapterSchema = await createChapterInputSchema();
};
i18n.on("languageChanged", handleLanguageChange);
export const createChapterInputSchema = async () => {
  await checkI18nInitialization(); // Ensure i18n is initialized
  return z.object({
    name: z
      .string()
      .min(1, { message: getTranslation("txt_error_name_required") }), // Custom error message for name
    description: z.string().optional(), // Optional field
    matiereId: z.string().min(1, {
      message:  getTranslation("txt_error_matiere_id_required"),
    }), // Custom error message for matiereId
    isLocked: z.boolean().optional(), // Optional field
    estTermine: z.boolean({
      required_error: getTranslation(
        "txt_error_completion_status_required"
      ), // Custom error message for estTermine
    }),
  });
};

export const getChapitreByIdSchema = z.object({
  id: z.string(),
});

export const deleteChapitreByIdSchema = z.object({
  id: z.string(),
});

export const updateChapitreByIdSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  matiereId: z.string(),
  isLocked: z.boolean().optional(),
});

export const getAllChapitersByMatiersSchema = z.object({
  matiers: z.union([z.string(), z.array(z.string())]),
});
